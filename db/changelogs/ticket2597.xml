<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="1" author="Pavel Tomskikh">
        <createProcedure procedureName="update_tsversion">
            CREATE OR REPLACE FUNCTION update_tsversion() RETURNS TRIGGER AS $update_tsversion$
            BEGIN
            NEW.tsversion = extract(epoch from now())::bigint;
            RETURN NEW;
            END;
            $update_tsversion$ LANGUAGE plpgsql;
        </createProcedure>

        <rollback>
            <sql>DROP FUNCTION update_tsversion()</sql>
        </rollback>
    </changeSet>

    <changeSet id="2" author="Pavel Tomskikh">
        <preConditions>
            <not>
                <tableExists tableName="iab_category"/>
            </not>
        </preConditions>

        <createTable tableName="iab_category" remarks="IAB categories">
            <column name="id"
                    type="integer"
                    autoIncrement="true"
                    remarks="unique id">
                <constraints primaryKey="true"/>
            </column>

            <column name="iab_id"
                    type="varchar(8)"
                    remarks="IAB category id">
                <constraints nullable="false"/>
            </column>

            <column name="name"
                    type="varchar(64)"
                    remarks="IAB category description">
                <constraints nullable="false"/>
            </column>

            <column name="tsversion"
                    type="bigint"
                    defaultValue="extract(epoch from now())::bigint"
                    remarks="latest update time">
                <constraints nullable="false"/>
            </column>

            <column name="deleted"
                    type="boolean"
                    defaultValue="false"
                    remarks="indicates if row deleted">
                <constraints nullable="false"/>
            </column>

            <column name="parent_id"
                    type="integer"
                    remarks="identify parent category">
                <constraints nullable="true"
                             foreignKeyName="parent_id"
                             referencedTableName="iab_category"
                             referencedColumnNames="id"/>
            </column>
        </createTable>

        <createIndex tableName="iab_category"
                     indexName="iab_category_parent_id_idx"
                     unique="false">
            <column name="parent_id" type="integer"/>
        </createIndex>

        <createProcedure procedureName="update_new_parent_iab_category">
            CREATE OR REPLACE FUNCTION update_new_parent_iab_category()
            RETURNS TRIGGER AS $update_new_parent_iab_category$
            BEGIN
            UPDATE iab_category
            SET tsversion = extract(epoch from now())::bigint
            WHERE id = NEW.parent_id;
            RETURN NEW;
            END;
            $update_new_parent_iab_category$ LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure procedureName="update_old_parent_iab_category">
            CREATE OR REPLACE FUNCTION update_old_parent_iab_category()
            RETURNS TRIGGER AS $update_old_parent_iab_category$
            BEGIN
            UPDATE iab_category
            SET tsversion = extract(epoch from now())::bigint
            WHERE id = OLD.parent_id;
            RETURN NEW;
            END;
            $update_old_parent_iab_category$ LANGUAGE plpgsql;
        </createProcedure>

        <sql>
            CREATE TRIGGER update_iab_category
            BEFORE UPDATE ON iab_category
            FOR EACH ROW EXECUTE PROCEDURE update_tsversion()
        </sql>

        <sql>
            CREATE TRIGGER update_new_parent_iab_category
            AFTER INSERT OR UPDATE ON iab_category
            FOR EACH ROW
            WHEN (NEW.parent_id IS NOT NULL)
            EXECUTE PROCEDURE update_new_parent_iab_category()
        </sql>

        <sql>
            CREATE TRIGGER update_old_parent_iab_category
            AFTER UPDATE OR DELETE ON iab_category
            FOR EACH ROW
            WHEN (OLD.parent_id IS NOT NULL)
            EXECUTE PROCEDURE update_old_parent_iab_category()
        </sql>

        <rollback>
            <dropTable tableName="iab_category"/>
            <sql>DROP FUNCTION update_new_parent_iab_category()</sql>
            <sql>DROP FUNCTION update_old_parent_iab_category()</sql>
        </rollback>
    </changeSet>

    <changeSet id="3" author="Pavel Tomskikh">
        <preConditions>
            <not>
                <tableExists tableName="publisher"/>
            </not>
        </preConditions>

        <createTable tableName="publisher"
                     remarks="Information about publishers">
            <column name="id"
                    type="integer"
                    autoIncrement="true"
                    remarks="unique id">
                <constraints primaryKey="true"/>
            </column>

            <column name="name"
                    type="varchar(128)"
                    remarks="publisher's name">
                <constraints nullable="false"/>
            </column>

            <column name="domain"
                    type="varchar(128)"
                    remarks="publisher's domain">
                <constraints nullable="false"/>
            </column>

            <column name="tsversion"
                    type="bigint"
                    defaultValue="extract(epoch from now())::bigint"
                    remarks="latest update time">
                <constraints nullable="false"/>
            </column>

            <column name="deleted"
                    type="boolean"
                    defaultValue="false"
                    remarks="indicates if row deleted">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <sql>
            CREATE TRIGGER update_publisher
            BEFORE UPDATE ON publisher
            FOR EACH ROW EXECUTE PROCEDURE update_tsversion()
        </sql>

        <createProcedure procedureName="update_new_publisher_tsversion">
            CREATE OR REPLACE FUNCTION update_new_publisher_tsversion()
            RETURNS TRIGGER AS $update_new_publisher_tsversion$
            BEGIN
            UPDATE publisher
            SET tsversion = extract(epoch from now())::bigint
            WHERE id = NEW.publisher_id;
            RETURN NEW;
            END;
            $update_new_publisher_tsversion$ LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure procedureName="update_old_publisher_tsversion">
            CREATE OR REPLACE FUNCTION update_old_publisher_tsversion()
            RETURNS TRIGGER AS $update_old_publisher_tsversion$
            BEGIN
            UPDATE publisher
            SET tsversion = extract(epoch from now())::bigint
            WHERE id = OLD.publisher_id;
            RETURN NEW;
            END;
            $update_old_publisher_tsversion$ LANGUAGE plpgsql;
        </createProcedure>

        <rollback>
            <sql>DROP FUNCTION update_new_publisher_tsversion()</sql>
            <sql>DROP FUNCTION update_old_publisher_tsversion()</sql>
            <dropTable tableName="publisher"/>
        </rollback>
    </changeSet>

    <changeSet id="4" author="Pavel Tomskikh">
        <preConditions>
            <not>
                <tableExists tableName="bidder"/>
            </not>
        </preConditions>

        <createTable tableName="bidder"
                     remarks="Information about bidders">
            <column name="id"
                    type="integer"
                    autoIncrement="true"
                    remarks="unique id">
                <constraints primaryKey="true"/>
            </column>

            <column name="name"
                    type="varchar(128)"
                    remarks="bidder name">
                <constraints nullable="false"/>
            </column>

            <column name="endpoint"
                    type="varchar(256)"
                    remarks="endpoint for bid requests">
                <constraints nullable="false"/>
            </column>

            <column name="tsversion"
                    type="bigint"
                    defaultValue="extract(epoch from now())::bigint"
                    remarks="latest update time">
                <constraints nullable="false"/>
            </column>

            <column name="deleted"
                    type="boolean"
                    defaultValue="false"
                    remarks="indicates if row deleted">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <sql>
            CREATE TRIGGER update_bidder
            BEFORE UPDATE ON bidder
            FOR EACH ROW EXECUTE PROCEDURE update_tsversion()
        </sql>

        <rollback>
            <dropTable tableName="bidder"/>
        </rollback>
    </changeSet>

    <changeSet id="5" author="Pavel Tomskikh">
        <preConditions>
            <not>
                <tableExists tableName="display_manager"/>
            </not>
        </preConditions>

        <createTable tableName="display_manager"
                     remarks="Information about software which renders ad">
            <column name="id"
                    type="integer"
                    autoIncrement="true"
                    remarks="unique id">
                <constraints primaryKey="true"/>
            </column>

            <column name="name"
                    type="varchar(128)"
                    remarks="diplay manager name">
                <constraints nullable="false"/>
            </column>

            <column name="ver"
                    type="varchar(16)"
                    remarks="display manager version">
                <constraints nullable="false"/>
            </column>

            <column name="tsversion"
                    type="bigint"
                    defaultValue="extract(epoch from now())::bigint"
                    remarks="latest update time">
                <constraints nullable="false"/>
            </column>

            <column name="deleted"
                    type="boolean"
                    defaultValue="false"
                    remarks="indicates if row deleted">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <sql>
            CREATE TRIGGER update_display_manager
            BEFORE UPDATE ON display_manager
            FOR EACH ROW EXECUTE PROCEDURE update_tsversion()
        </sql>

        <rollback>
            <dropTable tableName="display_manager"/>
        </rollback>
    </changeSet>

    <changeSet id="6" author="Pavel Tomskikh">
        <preConditions>
            <not>
                <tableExists tableName="publisher_blocked_category"/>
            </not>
        </preConditions>

        <createTable tableName="publisher_blocked_category"
                     remarks="IAB content categories which blocked by publisher">
            <column name="publisher_id"
                    type="integer"
                    remarks="publisher">
                <constraints primaryKey="true"
                             foreignKeyName="publisher_id"
                             referencedTableName="publisher"
                             referencedColumnNames="id"/>
            </column>

            <column name="iab_category_id"
                    type="integer"
                    remarks="blocked category">
                <constraints primaryKey="true"
                             foreignKeyName="iab_category_id"
                             referencedTableName="iab_category"
                             referencedColumnNames="id"/>
            </column>
        </createTable>

        <createIndex tableName="publisher_blocked_category"
                     indexName="publisher_blocked_category_iab_category_id_idx"
                     unique="false">
            <column name="iab_category_id"/>
        </createIndex>

        <createIndex tableName="publisher_blocked_category"
                     indexName="publisher_blocked_category_publisher_id_idx"
                     unique="false">
            <column name="publisher_id"/>
        </createIndex>

        <sql>
            CREATE TRIGGER update_new_publisher_publisher_blocked_category
            AFTER INSERT OR UPDATE ON publisher_blocked_category
            FOR EACH ROW EXECUTE PROCEDURE update_new_publisher_tsversion()
        </sql>

        <sql>
            CREATE TRIGGER update_old_publisher_publisher_blocked_category
            AFTER UPDATE OR DELETE ON publisher_blocked_category
            FOR EACH ROW EXECUTE PROCEDURE update_old_publisher_tsversion()
        </sql>

        <rollback>
            <dropTable tableName="publisher_blocked_category"/>
        </rollback>
    </changeSet>

    <changeSet id="7" author="Pavel Tomskikh">
        <preConditions>
            <not>
                <tableExists tableName="publisher_category"/>
            </not>
        </preConditions>

        <createTable tableName="publisher_category"
                     remarks="IAB content categories that describe the publisher">
            <column name="publisher_id"
                    type="integer"
                    remarks="publisher">
                <constraints primaryKey="true"
                             foreignKeyName="publisher_id"
                             referencedTableName="publisher"
                             referencedColumnNames="id"/>
            </column>

            <column name="iab_category_id"
                    type="integer"
                    remarks="category">
                <constraints primaryKey="true"
                             foreignKeyName="iab_category_id"
                             referencedTableName="iab_category"
                             referencedColumnNames="id"/>
            </column>
        </createTable>

        <createIndex tableName="publisher_category"
                     indexName="publisher_category_iab_category_id_idx"
                     unique="false">
            <column name="iab_category_id"/>
        </createIndex>

        <createIndex tableName="publisher_category"
                     indexName="publisher_category_publisher_id_idx"
                     unique="false">
            <column name="publisher_id"/>
        </createIndex>

        <sql>
            CREATE TRIGGER update_new_publisher_publisher_category
            AFTER INSERT OR UPDATE ON publisher_category
            FOR EACH ROW EXECUTE PROCEDURE update_new_publisher_tsversion()
        </sql>

        <sql>
            CREATE TRIGGER update_old_publisher_publisher_category
            AFTER UPDATE OR DELETE ON publisher_category
            FOR EACH ROW EXECUTE PROCEDURE update_old_publisher_tsversion()
        </sql>

        <rollback>
            <dropTable tableName="publisher_category"/>
        </rollback>
    </changeSet>

    <changeSet id="8" author="Pavel Tomskikh">
        <preConditions>
            <not>
                <tableExists tableName="publisher_blocked_advertiser"/>
            </not>
        </preConditions>

        <createTable tableName="publisher_blocked_advertiser"
                     remarks="Advertisers which blocked by publisher">
            <column name="id"
                    type="integer"
                    autoIncrement="true"
                    remarks="unique id">
                <constraints primaryKey="true"/>
            </column>

            <column name="publisher_id"
                    type="integer"
                    remarks="publisher">
                <constraints nullable="false"
                             foreignKeyName="publisher_id"
                             referencedTableName="publisher"
                             referencedColumnNames="id"/>
            </column>

            <column name="domain"
                    type="varchar(128)"
                    remarks="blocked advertiser">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <createIndex tableName="publisher_blocked_advertiser"
                     indexName="publisher_blocked_advertiser_publisher_id_idx"
                     unique="false">
            <column name="publisher_id"/>
        </createIndex>

        <createIndex tableName="publisher_blocked_advertiser"
                     indexName="publisher_blocked_advertiser_uk"
                     unique="true">
            <column name="publisher_id"/>
            <column name="domain"/>
        </createIndex>

        <sql>
            CREATE TRIGGER update_new_publisher_publisher_blocked_advertiser
            AFTER INSERT OR UPDATE ON publisher_blocked_advertiser
            FOR EACH ROW EXECUTE PROCEDURE update_new_publisher_tsversion()
        </sql>

        <sql>
            CREATE TRIGGER update_old_publisher_publisher_blocked_advertiser
            AFTER UPDATE OR DELETE ON publisher_blocked_advertiser
            FOR EACH ROW EXECUTE PROCEDURE update_old_publisher_tsversion()
        </sql>

        <rollback>
            <dropTable tableName="publisher_blocked_advertiser"/>
        </rollback>
    </changeSet>

    <changeSet id="9" author="Pavel Tomskikh">
        <preConditions>
            <not>
                <tableExists tableName="site"/>
            </not>
        </preConditions>

        <createTable tableName="site"
                     remarks="Information about site or app">
            <column name="id"
                    type="integer"
                    autoIncrement="true"
                    remarks="unique id">
                <constraints primaryKey="true"/>
            </column>

            <column name="publisher_id"
                    type="integer"
                    remarks="publisher that owns site/app">
                <constraints nullable="false"
                             foreignKeyName="publisher_id"
                             referencedTableName="publisher"
                             referencedColumnNames="id"/>
            </column>

            <column name="name"
                    type="varchar(128)"
                    remarks="site/app name">
                <constraints nullable="false"/>
            </column>

            <column name="type"
                    type="integer"
                    remarks="1 for site, 2 for app">
                <constraints nullable="false"/>
            </column>

            <column name="status"
                    type="integer"
                    remarks="site/app status: 0 - inactive, 1 - active">
                <constraints nullable="false"/>
            </column>

            <column name="privacy_policy"
                    type="integer"
                    remarks="indicates if the site/app has privacy policy: 0 - no privacy policy, 1 - privacy policy is specified">
                <constraints nullable="false"/>
            </column>

            <column name="test"
                    type="boolean"
                    remarks="indicates if the site/app is in test mode">
                <constraints nullable="false"/>
            </column>

            <column name="tsversion"
                    type="bigint"
                    defaultValue="extract(epoch from now())::bigint"
                    remarks="latest update time">
                <constraints nullable="false"/>
            </column>

            <column name="deleted"
                    type="boolean"
                    defaultValue="false"
                    remarks="indicates if row deleted">
                <constraints nullable="false"/>
            </column>

            <column name="domain"
                    type="varchar(128)"
                    remarks="site/app domain"/>

            <column name="keyword"
                    type="varchar(1024)"
                    remarks="comma separated list of keywords about the site/app"/>

            <column name="app_bundle"
                    type="varchar(128)"
                    remarks="app bundle or package name"/>

            <column name="app_store_url"
                    type="varchar(256)"
                    remarks="app store URL for an installed app"/>

            <column name="app_ver"
                    type="varchar(16)"
                    remarks="app version"/>
        </createTable>

        <createIndex tableName="site"
                     indexName="site_publisher_id_idx"
                     unique="false">
            <column name="publisher_id" type="integer"/>
        </createIndex>

        <sql>
            ALTER TABLE site ADD CHECK (
            type = 1 AND
            domain IS NOT NULL OR
            type = 2 AND
            app_bundle IS NOT NULL AND
            app_store_url IS NOT NULL AND
            app_ver IS NOT NULL)
        </sql>

        <sql>
            CREATE TRIGGER update_site
            BEFORE UPDATE ON site
            FOR EACH ROW EXECUTE PROCEDURE update_tsversion()
        </sql>

        <createProcedure procedureName="update_new_publisher_site_tsversion">
            CREATE OR REPLACE FUNCTION update_new_publisher_site_tsversion()
            RETURNS TRIGGER AS $update_new_publisher_site_tsversion$
            BEGIN
            IF NEW.ts_version != OLD.ts_version THEN
            UPDATE site SET ts_version = ts_version where publisher_id = NEW.id;
            END IF;
            RETURN NEW;
            END;
            $update_new_publisher_site_tsversion$ LANGUAGE plpgsql;
        </createProcedure>

        <sql>
            CREATE TRIGGER update_new_publisher_site_tsversion
            AFTER UPDATE ON publisher
            FOR EACH ROW EXECUTE PROCEDURE update_new_publisher_site_tsversion()
        </sql>

        <createProcedure procedureName="update_new_site_tsversion">
            CREATE OR REPLACE FUNCTION update_new_site_tsversion()
            RETURNS TRIGGER AS $update_new_site_tsversion$
            BEGIN
            UPDATE site
            SET tsversion = extract(epoch from now())::bigint
            WHERE id = NEW.site_id;
            RETURN NEW;
            END;
            $update_new_site_tsversion$ LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure procedureName="update_old_site_tsversion">
            CREATE OR REPLACE FUNCTION update_old_site_tsversion()
            RETURNS TRIGGER AS $update_old_site_tsversion$
            BEGIN
            UPDATE site
            SET tsversion = extract(epoch from now())::bigint
            WHERE id = OLD.site_id;
            RETURN NEW;
            END;
            $update_old_site_tsversion$ LANGUAGE plpgsql;
        </createProcedure>

        <rollback>
            <sql>DROP TRIGGER update_new_publisher_site_tsversion ON publisher</sql>
            <sql>DROP FUNCTION update_new_publisher_site_tsversion()</sql>
            <sql>DROP FUNCTION update_new_site_tsversion()</sql>
            <sql>DROP FUNCTION update_old_site_tsversion()</sql>
            <dropTable tableName="site"/>
        </rollback>
    </changeSet>

    <changeSet id="10" author="Pavel Tomskikh">
        <preConditions>
            <not>
                <tableExists tableName="site_category"/>
            </not>
        </preConditions>

        <createTable tableName="site_category"
                     remarks="IAB content categories that describe site/app">
            <column name="site_id"
                    type="integer"
                    remarks="site">
                <constraints primaryKey="true"
                             foreignKeyName="site_id"
                             referencedTableName="site"
                             referencedColumnNames="id"/>
            </column>

            <column name="iab_category_id"
                    type="integer"
                    remarks="category">
                <constraints primaryKey="true"
                             foreignKeyName="iab_category_id"
                             referencedTableName="iab_category"
                             referencedColumnNames="id"/>
            </column>
        </createTable>

        <createIndex tableName="site_category"
                     indexName="site_category_iab_category_id_idx"
                     unique="false">
            <column name="iab_category_id"/>
        </createIndex>

        <createIndex tableName="site_category"
                     indexName="site_category_site_id_idx"
                     unique="false">
            <column name="site_id"/>
        </createIndex>

        <sql>
            CREATE TRIGGER update_new_site_site_category_tsversion
            AFTER INSERT OR UPDATE ON site_category
            FOR EACH ROW EXECUTE PROCEDURE update_new_site_tsversion()
        </sql>

        <sql>
            CREATE TRIGGER update_old_site_site_category_tsversion
            AFTER UPDATE OR DELETE ON site_category
            FOR EACH ROW EXECUTE PROCEDURE update_old_site_tsversion()
        </sql>

        <rollback>
            <dropTable tableName="site_category"/>
        </rollback>
    </changeSet>

    <changeSet id="11" author="Pavel Tomskikh">
        <preConditions>
            <not>
                <tableExists tableName="site_display_manager"/>
            </not>
        </preConditions>

        <createTable tableName="site_display_manager"
                     remarks="Display managers associated with the site/app">
            <column name="site_id"
                    type="integer"
                    remarks="site">
                <constraints primaryKey="true"
                             foreignKeyName="site_id"
                             referencedTableName="site"
                             referencedColumnNames="id"/>
            </column>

            <column name="display_manager_id"
                    type="integer"
                    remarks="associated display manager">
                <constraints primaryKey="true"
                             foreignKeyName="display_manager_id"
                             referencedTableName="display_manager"
                             referencedColumnNames="id"/>
            </column>
        </createTable>

        <createIndex tableName="site_display_manager"
                     indexName="site_display_manager_display_manager_id_idx"
                     unique="false">
            <column name="display_manager_id"/>
        </createIndex>

        <createIndex tableName="site_display_manager"
                     indexName="site_display_manager_site_id_idx"
                     unique="false">
            <column name="site_id"/>
        </createIndex>

        <sql>
            CREATE TRIGGER update_new_site_site_display_manager_tsversion
            AFTER INSERT OR UPDATE ON site_display_manager
            FOR EACH ROW EXECUTE PROCEDURE update_new_site_tsversion()
        </sql>

        <sql>
            CREATE TRIGGER update_old_site_site_display_manager_tsversion
            AFTER UPDATE OR DELETE ON site_display_manager
            FOR EACH ROW EXECUTE PROCEDURE update_old_site_tsversion()
        </sql>

        <rollback>
            <dropTable tableName="site_display_manager"/>
        </rollback>
    </changeSet>

</databaseChangeLog>
