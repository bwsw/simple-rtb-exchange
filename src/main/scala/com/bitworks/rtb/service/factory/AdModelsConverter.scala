package com.bitworks.rtb.service.factory

import com.bitworks.rtb.model.ad.request.AdRequest
import com.bitworks.rtb.model.ad.response.AdResponse
import com.bitworks.rtb.model.http.ContentTypeModel
import com.bitworks.rtb.service.DataValidationException
import com.bitworks.rtb.service.parser.AdRequestParser
import com.bitworks.rtb.service.writer.AdResponseWriter

/**
  * Converter for ad models.
  *
  * @author Egor Ilchenko
  */
trait AdModelsConverter {

  /**
    * Returns parsed [[com.bitworks.rtb.model.ad.request.AdRequest AdRequest]].
    *
    * @param bytes input bytes
    * @param ct    [[com.bitworks.rtb.model.http.ContentTypeModel ContentTypeModel]]
    * @throws DataValidationException in case of missing handler or invalid bytes
    */
  def parse(bytes: Array[Byte], ct: ContentTypeModel): AdRequest


  /**
    * Returns generated byte array.
    *
    * @param response [[com.bitworks.rtb.model.ad.response.AdResponse AdResponse]]
    */
  def write(response: AdResponse): Array[Byte]
}

/**
  * Factory implpementation for ad request parsers.
  *
  * @author Egor Ilchenko
  */
class AdModelsConverterImpl(
    adRequestBindings: Map[ContentTypeModel, AdRequestParser],
    adResponseBindings: Map[ContentTypeModel, AdResponseWriter]) extends AdModelsConverter {

  /**
    * Returns parsed [[com.bitworks.rtb.model.ad.request.AdRequest AdRequest]].
    *
    * @param bytes input bytes
    * @param ct    [[com.bitworks.rtb.model.http.ContentTypeModel ContentTypeModel]]
    * @throws DataValidationException in case of missing handler or invalid bytes
    */
  override def parse(bytes: Array[Byte], ct: ContentTypeModel) = {
    adRequestBindings.get(ct) match {
      case Some(parser) => parser.parse(bytes)
      case None => throw new DataValidationException(s"cannot find ad request parser for $ct")
    }
  }

  /**
    * Returns generated byte array.
    *
    * @param response [[com.bitworks.rtb.model.ad.response.AdResponse AdResponse]]
    */
  override def write(response: AdResponse): Array[Byte] = {
    adResponseBindings.get(response.ct) match {
      case Some(writer) => writer.write(response)
      case None => throw new DataValidationException(
        s"cannot find ad response writer for ${response.ct}")
    }
  }
}

