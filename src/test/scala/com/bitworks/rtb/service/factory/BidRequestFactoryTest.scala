package com.bitworks.rtb.service.factory

import com.bitworks.rtb.model.ad.request.builder.AdRequestBuilder
import com.bitworks.rtb.model.ad.response.ErrorCode
import com.bitworks.rtb.model.ad.{request => ad}
import com.bitworks.rtb.model.db
import com.bitworks.rtb.model.db.IABCategory
import com.bitworks.rtb.model.http.Json
import com.bitworks.rtb.model.request._
import com.bitworks.rtb.model.request.builder._
import com.bitworks.rtb.service.DataValidationException
import com.bitworks.rtb.service.dao._
import org.easymock.EasyMock._
import org.easymock.IAnswer
import org.scalatest.easymock.EasyMockSugar
import org.scalatest.prop.TableDrivenPropertyChecks._
import org.scalatest.{FlatSpec, Matchers, OneInstancePerTest}

/**
  * Test for [[com.bitworks.rtb.service.factory.BidRequestFactory BidRequestFactory]].
  *
  * @author Pavel Tomskikh
  */
class BidRequestFactoryTest
  extends FlatSpec
    with Matchers
    with EasyMockSugar
    with OneInstancePerTest {
  val intCapture = newCapture[Int]
  val seqIntCapture = newCapture[Seq[Int]]

  val iabCategories = Seq(
    IABCategory(1, "IAB1", "iab1", None),
    IABCategory(2, "IAB2", "iab2", None),
    IABCategory(3, "IAB3", "iab3", None),
    IABCategory(4, "IAB4", "iab4", None),
    IABCategory(5, "IAB5", "iab5", None),
    IABCategory(6, "IAB6", "iab6", None),
    IABCategory(7, "IAB7", "iab7", None))

  def getCategory(id: Int) = iabCategories.find(_.id == id)

  def getCategories(ids: Seq[Int]) = iabCategories.filter(c => ids.contains(c.id))

  def getCategoriesId(ids: Seq[Int]) = getCategories(ids).map(_.iabId)

  val categoryDao = mock[CategoryDao]
  expecting {
    categoryDao.getAll.andStubReturn(iabCategories)
    categoryDao.get(capture(intCapture)).andStubAnswer(
      new IAnswer[Option[IABCategory]] {
        override def answer(): Option[IABCategory] = getCategory(intCapture.getValue)
      })
    categoryDao.get(capture(seqIntCapture)).andStubAnswer(
      new IAnswer[Seq[IABCategory]] {
        override def answer(): Seq[IABCategory] = getCategories(seqIntCapture.getValue)
      })
    replay(categoryDao)
  }

  val dbPublisher1 = db.Publisher(
    1, "pub1", Seq(1, 2, 3), "pub1.com", Seq("block1.com", "block2.com"), Seq(6, 7))
  val publisher1 = PublisherBuilder()
    .withId(dbPublisher1.id.toString)
    .withName(dbPublisher1.name)
    .withCat(getCategoriesId(dbPublisher1.categoriesIds))
    .withDomain(dbPublisher1.domain)
    .build
  val dbPublisher2 = db.Publisher(
    2, "pub2", Seq(3, 4, 5), "pub2.com", Seq("block2.com", "block3.com"), Seq(1, 2))
  val publisher2 = PublisherBuilder()
    .withId(dbPublisher2.id.toString)
    .withName(dbPublisher2.name)
    .withCat(getCategoriesId(dbPublisher2.categoriesIds))
    .withDomain(dbPublisher2.domain)
    .build
  val dbPublishers = Seq(dbPublisher1, dbPublisher2)
  val publisherDao = mock[PublisherDao]
  expecting {
    publisherDao.getAll.andStubReturn(dbPublishers)
    publisherDao.get(capture(intCapture)).andStubAnswer(
      new IAnswer[Option[db.Publisher]] {
        override def answer(): Option[db.Publisher] =
          dbPublishers.find(_.id == intCapture.getValue)
      })
    publisherDao.get(capture(seqIntCapture)).andStubAnswer(
      new IAnswer[Seq[db.Publisher]] {
        override def answer(): Seq[db.Publisher] =
          dbPublishers.filter(p => seqIntCapture.getValue.contains(p.id))
      })
    replay(publisherDao)
  }

  val dbSiteActive = db.Site(
    1, "siteActive", 1, db.Status.active, 0, test = true, "site.com", Some("kw1,kw2"), Seq(1, 2))
  val dbSiteInactive = db.Site(
    3,
    "siteInactive",
    1,
    db.Status.inactive,
    0,
    test = true,
    "site.com",
    Some("kw1,kw2"),
    Seq(1, 2))
  val adSiteBuilder = ad.builder.SiteBuilder(dbSiteActive.id)
  val siteBuilder = SiteBuilder()
    .withId(dbSiteActive.id.toString)
    .withName(dbSiteActive.name)
    .withDomain(dbSiteActive.domain)
    .withKeywords(dbSiteActive.keyword.get)
    .withCat(getCategoriesId(dbSiteActive.iabCategoriesIds))
    .withPrivacyPolicy(dbSiteActive.privacyPolicy)
  val dbSites = Seq(dbSiteActive, dbSiteInactive)
  val siteDao = mock[SiteDao]
  expecting {
    siteDao.getAll.andStubReturn(dbSites)
    siteDao.get(capture(intCapture)).andStubAnswer(
      new IAnswer[Option[db.Site]] {
        override def answer(): Option[db.Site] =
          dbSites.find(_.id == intCapture.getValue)
      })
    siteDao.get(capture(seqIntCapture)).andStubAnswer(
      new IAnswer[Seq[db.Site]] {
        override def answer(): Seq[db.Site] =
          dbSites.filter(p => seqIntCapture.getValue.contains(p.id))
      })
    replay(siteDao)
  }

  val dbAppActive = db.App(
    2,
    "appActive",
    2,
    db.Status.active,
    1,
    test = true,
    None,
    None,
    Seq(4, 5),
    "com.app",
    "store.com",
    "0.1")
  val dbAppInactive = db.App(
    4,
    "appInactive",
    2,
    db.Status.inactive,
    1,
    test = true,
    None,
    None,
    Seq(4, 5),
    "com.app",
    "store.com",
    "0.1")
  val adAppBuilder = ad.builder.AppBuilder(dbAppActive.id)
  val appBuilder = AppBuilder()
    .withId(dbAppActive.id.toString)
    .withName(dbAppActive.name)
    .withCat(getCategoriesId(dbAppActive.iabCategoriesIds))
    .withBundle(dbAppActive.bundle)
    .withVer(dbAppActive.version)
    .withStoreUrl(dbAppActive.storeUrl)
    .withPrivacyPolicy(dbAppActive.privacyPolicy)
  val dbApps = Seq(dbAppActive, dbAppInactive)
  val appDao = mock[AppDao]
  expecting {
    appDao.getAll.andStubReturn(dbApps)
    appDao.get(capture(intCapture)).andStubAnswer(
      new IAnswer[Option[db.App]] {
        override def answer(): Option[db.App] =
          dbApps.find(_.id == intCapture.getValue)
      })
    appDao.get(capture(seqIntCapture)).andStubAnswer(
      new IAnswer[Seq[db.App]] {
        override def answer(): Seq[db.App] =
          dbApps.filter(p => seqIntCapture.getValue.contains(p.id))
      })
    replay(appDao)
  }

  val adRequestId = "12345"

  val factory = new BidRequestFactoryImpl(categoryDao, publisherDao, siteDao, appDao)

  val correctIabsExample = getCategories(Seq(1, 2, 3)).map(_.iabId)
  val correctProducer = ProducerBuilder()
    .withId("444")
    .withName("prod")
    .withDomain("prod.com")
    .withCat(getCategoriesId(Seq(2, 3)))
    .build
  val correctContent = ContentBuilder()
    .withId("123")
    .withEpisode(1)
    .withTitle("title")
    .withSeries("series")
    .withSeason("season")
    .withProducer(correctProducer)
    .withUrl("content.com")
    .withCat(getCategoriesId(Seq(1, 3, 5)))
    .withVideoQuality(3)
    .withContext(1)
    .withContentRating("10/10")
    .withUserRating("22")
    .withQagMediaRating(2)
    .withKeywords("kw")
    .withLiveStream(0)
    .withSourceRelationship(1)
    .withLen(1000)
    .withLanguage("en")
    .withEmbeddable(1)
    .build
  val correctGeo = GeoBuilder()
    .withLat(10.5f)
    .withLon(-55.66f)
    .withType(1)
    .withCountry("GER")
    .withRegion("reg")
    .withCity("Berlin")
    .withZip("zip12412")
    .withUtcOffset(-1)
    .build
  val correctAdUser = ad.builder.UserBuilder()
    .withId("124315")
    .withYob(1990)
    .withGender("F")
    .withKeywords("kw")
    .withGeo(correctGeo)
    .build
  val correctUser = UserBuilder()
    .withId(correctAdUser.id.get)
    .withYob(correctAdUser.yob.get)
    .withGender(correctAdUser.gender.get)
    .withKeywords(correctAdUser.keywords.get)
    .withGeo(correctAdUser.geo.get)
    .build
  val correctDevice = DeviceBuilder()
    .withUa("useragent")
    .withGeo(correctGeo)
    .withDnt(0)
    .withLmt(1)
    .withIp("8.8.8.8")
    .withIpv6("::1")
    .withDeviceType(5)
    .withMake("nokla")
    .withModel("3310")
    .withOs("android")
    .withOsv("2.4")
    .withHwv("1.1")
    .withH(200)
    .withW(100)
    .withPpi(16)
    .withPxRatio(1)
    .withJs(1)
    .withFlashVer("2")
    .withLanguage("ch")
    .withCarrier("edge")
    .withConnectionType(4)
    .withIfa("ifa")
    .withDidsha1("sha1")
    .withDidmd5("md5")
    .withDpidsha1("sha1")
    .withDpidmd5("md5")
    .withMacsha1("sha1")
    .withMacmd5("md5")
    .build
  val correctRegs = RegsBuilder().withCoppa(1).build
  val correctBanner = BannerBuilder()
    .withWmin(280)
    .withW(300)
    .withWmax(320)
    .withHmin(90)
    .withH(100)
    .withHmax(120)
    .withId("banner1")
    .withBtype(Seq(1, 4))
    .withBattr(Seq(1, 5, 16))
    .withPos(4)
    .withMimes(Seq("application/x-shockwave-flash"))
    .withTopFrame(1)
    .withExpdir(Seq(1, 2, 5))
    .withApi(Seq(2, 3))
    .build
  val correctVideo = VideoBuilder(Seq("video/x-ms-wmv", "video/x-flv"))
    .withMinDuration(10)
    .withMaxDuration(3600)
    .withProtocol(1)
    .withProtocols(Seq(1, 5, 6))
    .withW(320)
    .withH(240)
    .withStartDelay(0)
    .withLinearity(1)
    .withSequence(1)
    .withBattr(Seq(11, 16))
    .withMaxExtended(-1)
    .withMinBitrate(64)
    .withMaxBitrate(4000)
    .withBoxingAllowed(1)
    .withPlaybackMethod(Seq(2, 4))
    .withDelivery(Seq(2))
    .withPos(0)
    .withCompanionAd(Seq(correctBanner))
    .withApi(Seq(5))
    .withCompanionType(Seq(1, 2, 3))
    .build
  val correctNative = NativeBuilder("native ad")
    .withVer("1.0")
    .withApi(Seq(1, 4, 5))
    .withBattr(Seq(1, 2, 3, 7, 15, 16))
    .build

  // incorrect models
  val incorrectProducer = ProducerBuilder().withName("").build
  val incorrectGeo = GeoBuilder().withLat(1000).build
  val incorrectBanner = BannerBuilder().withH(-1).build

  "BidRequestFactory" should "create bid request for correct ad request with site" in {
    val adImp = ad.builder.ImpBuilder("1")
      .withBanner(correctBanner)
      .withNative(correctNative)
      .withVideo(correctVideo)
      .build
    val adSite = adSiteBuilder
      .withSectionCat(getCategoriesId(Seq(1, 2)))
      .withPageCat(getCategoriesId(Seq(1)))
      .withPage("page123")
      .withRef("from.com")
      .withSearch("search")
      .withMobile(0)
      .withContent(correctContent)
      .build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withSite(adSite)
      .withUser(correctAdUser)
      .withDevice(correctDevice)
      .withRegs(correctRegs)
      .withTmax(500)
      .build

    val site = siteBuilder.withPublisher(publisher1)
      .withSectionCat(adSite.sectionCat.get)
      .withPageCat(adSite.pageCat.get)
      .withPage(adSite.page.get)
      .withRef(adSite.ref.get)
      .withSearch(adSite.search.get)
      .withMobile(adSite.mobile.get)
      .withContent(adSite.content.get)
      .build
    val imp = ImpBuilder(adImp.id)
      .withBanner(correctBanner)
      .withNative(correctNative)
      .withVideo(correctVideo)
      .build
    val expectedBidRequest = BidRequestBuilder(adRequestId, Seq(imp))
      .withSite(site)
      .withBcat(getCategoriesId(dbPublisher1.blockedCategoriesIds))
      .withBadv(dbPublisher1.blockedDomains)
      .withUser(correctUser)
      .withDevice(correctDevice)
      .withRegs(correctRegs)
      .withTmax(500)
      .build

    factory.create(adRequest) shouldBe expectedBidRequest
  }

  it should "throw DataValidationException for ad request with inactive site" in {
    val adImp = ad.builder.ImpBuilder("1")
      .withBanner(correctBanner)
      .withNative(correctNative)
      .withVideo(correctVideo)
      .build
    val adSite = ad.builder.SiteBuilder(dbSiteInactive.id)
      .withSectionCat(getCategoriesId(Seq(1, 2)))
      .withPageCat(getCategoriesId(Seq(1)))
      .withPage("page123")
      .withRef("from.com")
      .withSearch("search")
      .withMobile(0)
      .withContent(correctContent)
      .build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withSite(adSite)
      .withUser(correctAdUser)
      .withDevice(correctDevice)
      .withRegs(correctRegs)
      .withTmax(500)
      .build

    val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
    thrown.getError shouldBe ErrorCode.SITE_OR_APP_INACTIVE
  }

  it should "throw DataValidationException for ad request with site which db does not contains" in {
    val adImp = ad.builder.ImpBuilder("1")
      .withBanner(correctBanner)
      .withNative(correctNative)
      .withVideo(correctVideo)
      .build
    val adSite = ad.builder.SiteBuilder(100)
      .withSectionCat(getCategoriesId(Seq(1, 2)))
      .withPageCat(getCategoriesId(Seq(1)))
      .withPage("page123")
      .withRef("from.com")
      .withSearch("search")
      .withMobile(0)
      .withContent(correctContent)
      .build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withSite(adSite)
      .withUser(correctAdUser)
      .withDevice(correctDevice)
      .withRegs(correctRegs)
      .withTmax(500)
      .build

    val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
    thrown.getError shouldBe ErrorCode.SITE_OR_APP_NOT_FOUND
  }

  it should "create bid request for correct ad request with app" in {
    val adImp = ad.builder.ImpBuilder("1")
      .withBanner(correctBanner)
      .withNative(correctNative)
      .withVideo(correctVideo)
      .build
    val adApp = adAppBuilder
      .withSectionCat(getCategoriesId(Seq(5, 6)))
      .withPageCat(getCategoriesId(Seq(5)))
      .withContent(correctContent)
      .build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withApp(adApp)
      .withUser(correctAdUser)
      .withDevice(correctDevice)
      .withRegs(correctRegs)
      .withTmax(500)
      .build

    val app = appBuilder
      .withPublisher(publisher2)
      .withSectionCat(adApp.sectionCat.get)
      .withPageCat(adApp.pageCat.get)
      .withContent(adApp.content.get)
      .build
    val imp = ImpBuilder(adImp.id)
      .withBanner(correctBanner)
      .withNative(correctNative)
      .withVideo(correctVideo)
      .build
    val expectedBidRequest = BidRequestBuilder(adRequestId, Seq(imp))
      .withApp(app)
      .withBcat(getCategoriesId(dbPublisher2.blockedCategoriesIds))
      .withBadv(dbPublisher2.blockedDomains)
      .withUser(correctUser)
      .withDevice(correctDevice)
      .withRegs(correctRegs)
      .withTmax(500)
      .build

    factory.create(adRequest) shouldBe expectedBidRequest
  }

  it should "throw DataValidationException for ad request with inactive app" in {
    val adImp = ad.builder.ImpBuilder("1")
      .withBanner(correctBanner)
      .withNative(correctNative)
      .withVideo(correctVideo)
      .build
    val adApp = ad.builder.AppBuilder(dbAppInactive.id)
      .withSectionCat(getCategoriesId(Seq(5, 6)))
      .withPageCat(getCategoriesId(Seq(5)))
      .withContent(correctContent)
      .build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withApp(adApp)
      .withUser(correctAdUser)
      .withDevice(correctDevice)
      .withRegs(correctRegs)
      .withTmax(500)
      .build

    val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
    thrown.getError shouldBe ErrorCode.SITE_OR_APP_INACTIVE
  }

  it should "throw DataValidationException for ad request with app which db does not contains" in {
    val adImp = ad.builder.ImpBuilder("1")
      .withBanner(correctBanner)
      .withNative(correctNative)
      .withVideo(correctVideo)
      .build
    val adApp = ad.builder.AppBuilder(100)
      .withSectionCat(getCategoriesId(Seq(5, 6)))
      .withPageCat(getCategoriesId(Seq(5)))
      .withContent(correctContent)
      .build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withApp(adApp)
      .withUser(correctAdUser)
      .withDevice(correctDevice)
      .withRegs(correctRegs)
      .withTmax(500)
      .build

    val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
    thrown.getError shouldBe ErrorCode.SITE_OR_APP_NOT_FOUND
  }

  it should "throw DataValidationException for ad request with site and app" in {
    val adImp = ad.builder.ImpBuilder("1")
      .withBanner(correctBanner)
      .withNative(correctNative)
      .withVideo(correctVideo)
      .build
    val adApp = adAppBuilder
      .withSectionCat(getCategoriesId(Seq(5, 6)))
      .withPageCat(getCategoriesId(Seq(5)))
      .withContent(correctContent)
      .build
    val adSite = adSiteBuilder
      .withSectionCat(getCategoriesId(Seq(1, 2)))
      .withPageCat(getCategoriesId(Seq(1)))
      .withPage("page123")
      .withRef("from.com")
      .withSearch("search")
      .withMobile(0)
      .withContent(correctContent)
      .build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withApp(adApp)
      .withSite(adSite)
      .withUser(correctAdUser)
      .withDevice(correctDevice)
      .withRegs(correctRegs)
      .withTmax(500)
      .build

    val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
    thrown.getError shouldBe ErrorCode.INCORRECT_REQUEST
  }

  val correctSizes = Table(
    ("min", "exp", "max"),
    (Some(1), Some(1), Some(1)),
    (Some(100), Some(200), Some(300)),
    (Some(100), Some(200), None),
    (Some(100), None, Some(300)),
    (Some(100), None, None),
    (None, Some(200), Some(300)),
    (None, Some(200), None),
    (None, None, Some(300)),
    (None, None, None))

  it should "create bid request for ad request with correct banner height" in {
    forAll(correctSizes) { (min: Option[Int], exp: Option[Int], max: Option[Int]) =>
      val bannerBuilder = BannerBuilder()
      min.foreach(bannerBuilder.withHmin)
      exp.foreach(bannerBuilder.withH)
      max.foreach(bannerBuilder.withHmax)
      val banner = bannerBuilder.build

      val adImp = ad.builder.ImpBuilder("1").withBanner(banner).build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json).withSite(adSiteBuilder.build)
        .build

      val site = siteBuilder.withPublisher(publisher1).build
      val imp = ImpBuilder(adImp.id).withBanner(banner).build
      val expectedBidRequest = BidRequestBuilder(adRequestId, Seq(imp))
        .withSite(site)
        .withBcat(getCategoriesId(dbPublisher1.blockedCategoriesIds))
        .withBadv(dbPublisher1.blockedDomains)
        .build

      factory.create(adRequest) shouldBe expectedBidRequest
    }
  }

  val incorrectSizes = Table(
    ("min", "exp", "max"),
    (Some(100), Some(99), Some(300)),
    (Some(100), Some(200), Some(199)),
    (Some(100), Some(99), Some(98)),
    (Some(100), Some(99), None),
    (Some(100), None, Some(98)),
    (Some(0), None, None),
    (None, Some(99), Some(98)),
    (None, Some(0), None),
    (None, None, Some(0)),
    (Some(-100), Some(200), Some(300)),
    (Some(100), Some(-200), Some(300)),
    (Some(100), Some(200), Some(-300)),
    (Some(-3), Some(-2), Some(-1)),
    (None, None, Some(-10)),
    (None, Some(-10), None),
    (Some(-10), None, None))

  it should "create bid request for ad request with correct banner width" in {
    forAll(correctSizes) { (min: Option[Int], exp: Option[Int], max: Option[Int]) =>
      val bannerBuilder = BannerBuilder()
      min.foreach(bannerBuilder.withWmin)
      exp.foreach(bannerBuilder.withW)
      max.foreach(bannerBuilder.withWmax)
      val banner = bannerBuilder.build

      val adImp = ad.builder.ImpBuilder("1").withBanner(banner).build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json).withSite(adSiteBuilder.build)
        .build

      val site = siteBuilder.withPublisher(publisher1).build
      val imp = ImpBuilder(adImp.id).withBanner(banner).build
      val expectedBidRequest = BidRequestBuilder(adRequestId, Seq(imp))
        .withSite(site)
        .withBcat(getCategoriesId(dbPublisher1.blockedCategoriesIds))
        .withBadv(dbPublisher1.blockedDomains)
        .build

      factory.create(adRequest) shouldBe expectedBidRequest
    }
  }

  it should "throw DataValidationException for ad request with incorrect banner height" in {
    forAll(incorrectSizes) { (min: Option[Int], exp: Option[Int], max: Option[Int]) =>
      val bannerBuilder = BannerBuilder()
      min.foreach(bannerBuilder.withHmin)
      exp.foreach(bannerBuilder.withH)
      max.foreach(bannerBuilder.withHmax)
      val banner = bannerBuilder.build

      val adImp = ad.builder.ImpBuilder("1").withBanner(banner).build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json).withSite(adSiteBuilder.build)
        .build

      val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
      thrown.getError shouldBe ErrorCode.INCORRECT_REQUEST
    }
  }

  it should "throw DataValidationException for ad request with incorrect banner width" in {
    forAll(incorrectSizes) { (min: Option[Int], exp: Option[Int], max: Option[Int]) =>
      val bannerBuilder = BannerBuilder()
      min.foreach(bannerBuilder.withWmin)
      exp.foreach(bannerBuilder.withW)
      max.foreach(bannerBuilder.withWmax)
      val banner = bannerBuilder.build

      val adImp = ad.builder.ImpBuilder("1").withBanner(banner).build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json).withSite(adSiteBuilder.build)
        .build

      val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
      thrown.getError shouldBe ErrorCode.INCORRECT_REQUEST
    }
  }

  it should "create bid request for ad request with correct banner" in {
    val correctBanners = Table(
      ("w",
        "h",
        "wmax",
        "hmax",
        "wmin",
        "hmin",
        "id",
        "btype",
        "battr",
        "pos",
        "mimes",
        "topFrame",
        "expdir",
        "api"),
      (Some(200),
        Some(100),
        Some(220),
        Some(120),
        Some(180),
        Some(80),
        Some("123"),
        Some(Seq(1, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(2),
        Some(Seq("application/x-shockwave-flash")),
        Some(1),
        Some(Seq(2, 5)),
        Some(Seq(1, 4))),
      (Some(200),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        Some(100),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        Some(220),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        Some(120),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        Some(180),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        Some(80),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        Some("123"),
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(1, 2, 4)),
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(1, 4, 7, 16)),
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(2),
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq("application/x-shockwave-flash")),
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(1),
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(2, 5)),
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(1, 4))),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None))

    forAll(correctBanners) { (
      w: Option[Int],
      h: Option[Int],
      wmax: Option[Int],
      hmax: Option[Int],
      wmin: Option[Int],
      hmin: Option[Int],
      id: Option[String],
      btype: Option[Seq[Int]],
      battr: Option[Seq[Int]],
      pos: Option[Int],
      mimes: Option[Seq[String]],
      topFrame: Option[Int],
      expdir: Option[Seq[Int]],
      api: Option[Seq[Int]]) =>

      val banner = Banner(
        w,
        h,
        wmax,
        hmax,
        wmin,
        hmin,
        id,
        btype,
        battr,
        pos,
        mimes,
        topFrame,
        expdir,
        api,
        None)
      val adImp = ad.builder.ImpBuilder("1").withBanner(banner).build
      val adSite = adSiteBuilder.build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json).withSite(adSite).build

      val site = siteBuilder.withPublisher(publisher1).build
      val imp = ImpBuilder(adImp.id).withBanner(banner).build
      val expectedBidRequest = BidRequestBuilder(adRequestId, Seq(imp))
        .withSite(site)
        .withBcat(getCategoriesId(dbPublisher1.blockedCategoriesIds))
        .withBadv(dbPublisher1.blockedDomains)
        .build

      factory.create(adRequest) shouldBe expectedBidRequest
    }
  }

  it should "throw DataValidationException for ad request with incorrect banner" in {
    val incorrectBanners = Table(
      ("w",
        "h",
        "wmax",
        "hmax",
        "wmin",
        "hmin",
        "id",
        "btype",
        "battr",
        "pos",
        "mimes",
        "topFrame",
        "expdir",
        "api"),
      (Some(-200),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        Some(-100),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        Some(-220),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        Some(-120),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        Some(-180),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        Some(-80),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(-1, 2, 4)),
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(-1, 4, 7, 16)),
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(-2),
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq("")),
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(-1),
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(-2, 5)),
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(-1, 4))),
      (Some(-200),
        Some(100),
        Some(220),
        Some(120),
        Some(180),
        Some(80),
        Some("123"),
        Some(Seq(1, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(2),
        Some(Seq("application/x-shockwave-flash")),
        Some(1),
        Some(Seq(2, 5)),
        Some(Seq(1, 4))),
      (Some(200),
        Some(-100),
        Some(220),
        Some(120),
        Some(180),
        Some(80),
        Some("123"),
        Some(Seq(1, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(2),
        Some(Seq("application/x-shockwave-flash")),
        Some(1),
        Some(Seq(2, 5)),
        Some(Seq(1, 4))),
      (Some(200),
        Some(100),
        Some(-220),
        Some(120),
        Some(180),
        Some(80),
        Some("123"),
        Some(Seq(1, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(2),
        Some(Seq("application/x-shockwave-flash")),
        Some(1),
        Some(Seq(2, 5)),
        Some(Seq(1, 4))),
      (Some(200),
        Some(100),
        Some(220),
        Some(-120),
        Some(180),
        Some(80),
        Some("123"),
        Some(Seq(1, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(2),
        Some(Seq("application/x-shockwave-flash")),
        Some(1),
        Some(Seq(2, 5)),
        Some(Seq(1, 4))),
      (Some(200),
        Some(100),
        Some(220),
        Some(120),
        Some(-180),
        Some(80),
        Some("123"),
        Some(Seq(1, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(2),
        Some(Seq("application/x-shockwave-flash")),
        Some(1),
        Some(Seq(2, 5)),
        Some(Seq(1, 4))),
      (Some(200),
        Some(100),
        Some(220),
        Some(120),
        Some(180),
        Some(-80),
        Some("123"),
        Some(Seq(1, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(2),
        Some(Seq("application/x-shockwave-flash")),
        Some(1),
        Some(Seq(2, 5)),
        Some(Seq(1, 4))),
      (Some(200),
        Some(100),
        Some(220),
        Some(120),
        Some(180),
        Some(80),
        Some(""),
        Some(Seq(1, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(2),
        Some(Seq("application/x-shockwave-flash")),
        Some(1),
        Some(Seq(2, 5)),
        Some(Seq(1, 4))),
      (Some(200),
        Some(100),
        Some(220),
        Some(120),
        Some(180),
        Some(80),
        Some("123"),
        Some(Seq(0, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(2),
        Some(Seq("application/x-shockwave-flash")),
        Some(1),
        Some(Seq(2, 5)),
        Some(Seq(1, 4))),
      (Some(200),
        Some(100),
        Some(220),
        Some(120),
        Some(180),
        Some(80),
        Some("123"),
        Some(Seq(1, 2, 4)),
        Some(Seq(0, 4, 7, 16)),
        Some(2),
        Some(Seq("application/x-shockwave-flash")),
        Some(1),
        Some(Seq(2, 5)),
        Some(Seq(1, 4))),
      (Some(200),
        Some(100),
        Some(220),
        Some(120),
        Some(180),
        Some(80),
        Some("123"),
        Some(Seq(1, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(9),
        Some(Seq("application/x-shockwave-flash")),
        Some(1),
        Some(Seq(2, 5)),
        Some(Seq(1, 4))),
      (Some(200),
        Some(100),
        Some(220),
        Some(120),
        Some(180),
        Some(80),
        Some("123"),
        Some(Seq(1, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(2),
        Some(Seq("")),
        Some(1),
        Some(Seq(2, 5)),
        Some(Seq(1, 4))),
      (Some(200),
        Some(100),
        Some(220),
        Some(120),
        Some(180),
        Some(80),
        Some("123"),
        Some(Seq(1, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(2),
        Some(Seq("application/x-shockwave-flash")),
        Some(2),
        Some(Seq(2, 5)),
        Some(Seq(1, 4))),
      (Some(200),
        Some(100),
        Some(220),
        Some(120),
        Some(180),
        Some(80),
        Some("123"),
        Some(Seq(1, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(2),
        Some(Seq("application/x-shockwave-flash")),
        Some(1),
        Some(Seq(2, 5, 6)),
        Some(Seq(1, 4))),
      (Some(200),
        Some(100),
        Some(220),
        Some(120),
        Some(180),
        Some(80),
        Some("123"),
        Some(Seq(1, 2, 4)),
        Some(Seq(1, 4, 7, 16)),
        Some(2),
        Some(Seq("application/x-shockwave-flash")),
        Some(1),
        Some(Seq(2, 5)),
        Some(Seq(1, 7))))

    forAll(incorrectBanners) { (
      w: Option[Int],
      h: Option[Int],
      wmax: Option[Int],
      hmax: Option[Int],
      wmin: Option[Int],
      hmin: Option[Int],
      id: Option[String],
      btype: Option[Seq[Int]],
      battr: Option[Seq[Int]],
      pos: Option[Int],
      mimes: Option[Seq[String]],
      topFrame: Option[Int],
      expdir: Option[Seq[Int]],
      api: Option[Seq[Int]]) =>

      val banner = Banner(
        w,
        h,
        wmax,
        hmax,
        wmin,
        hmin,
        id,
        btype,
        battr,
        pos,
        mimes,
        topFrame,
        expdir,
        api,
        None)
      val adImp = ad.builder.ImpBuilder("1").withBanner(banner).build
      val adSite = adSiteBuilder.build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json).withSite(adSite).build

      val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
      thrown.getError shouldBe ErrorCode.INCORRECT_REQUEST
    }
  }

  it should "create bid request for ad request with correct video" in {
    val correctVideos = Table(
      ("minDuration",
        "maxDuration",
        "protocol",
        "protocols",
        "w",
        "h",
        "startDelay",
        "linearity",
        "sequence",
        "battr",
        "maxExtended",
        "minBitrate",
        "maxBitrate",
        "playbackMethod",
        "delivery",
        "pos",
        "companionAd",
        "api",
        "companionType"),
      (Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Some(10),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        Some(20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        Some(3),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        Some(Seq(1, 2, 4)),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        Some(700),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        Some(400),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        Some(0),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(1),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(5),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(1, 2, 3, 10)),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(-1),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(128),
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(512),
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(1)),
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(2)),
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(3),
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(correctBanner)),
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(3)),
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(2))),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None))

    forAll(correctVideos) { (
      minDuration: Option[Int],
      maxDuration: Option[Int],
      protocol: Option[Int],
      protocols: Option[Seq[Int]],
      w: Option[Int],
      h: Option[Int],
      startDelay: Option[Int],
      linearity: Option[Int],
      sequence: Option[Int],
      battr: Option[Seq[Int]],
      maxExtended: Option[Int],
      minBitrate: Option[Int],
      maxBitrate: Option[Int],
      playbackMethod: Option[Seq[Int]],
      delivery: Option[Seq[Int]],
      pos: Option[Int],
      companionAd: Option[Seq[Banner]],
      api: Option[Seq[Int]],
      companionType: Option[Seq[Int]]) =>

      val video = Video(
        Seq("video/flv"),
        minDuration,
        maxDuration,
        protocol,
        protocols,
        w,
        h,
        startDelay,
        linearity,
        sequence,
        battr,
        maxExtended,
        minBitrate,
        maxBitrate,
        1,
        playbackMethod,
        delivery,
        pos,
        companionAd,
        api,
        companionType,
        None)
      val adImp = ad.builder.ImpBuilder("1").withVideo(video).build
      val adSite = adSiteBuilder.build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json).withSite(adSite).build

      val site = siteBuilder.withPublisher(publisher1).build
      val imp = ImpBuilder(adImp.id).withVideo(video).build
      val expectedBidRequest = BidRequestBuilder(adRequestId, Seq(imp))
        .withSite(site)
        .withBcat(getCategoriesId(dbPublisher1.blockedCategoriesIds))
        .withBadv(dbPublisher1.blockedDomains)
        .build

      factory.create(adRequest) shouldBe expectedBidRequest
    }
  }

  it should "throw DataValidationException for ad request with incorrect video" in {
    val incorrectVideos = Table(
      ("mimes",
        "minDuration",
        "maxDuration",
        "protocol",
        "protocols",
        "w",
        "h",
        "startDelay",
        "linearity",
        "sequence",
        "battr",
        "maxExtended",
        "minBitrate",
        "maxBitrate",
        "boxingAllowed",
        "playbackMethod",
        "delivery",
        "pos",
        "companionAd",
        "api",
        "companionType"),
      (Seq(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        Some(0),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        Some(0),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        Some(10),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        Some(Seq(1, 2, 14)),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        Some(0),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        Some(0),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        None,
        Some(-3),
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(3),
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(0, 2, 3, 10)),
        None,
        None,
        None,
        1,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(-2),
        None,
        None,
        1,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(0),
        None,
        1,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(0),
        1,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        2,
        None,
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        Some(Seq(1, 5)),
        None,
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        Some(Seq(3)),
        None,
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        None,
        Some(9),
        None,
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        None,
        None,
        Some(Seq(incorrectBanner)),
        None,
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        None,
        None,
        None,
        Some(Seq(0)),
        None),
      (Seq("video/flv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
        None,
        None,
        None,
        None,
        Some(Seq(0))),
      (Seq(""),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(-5),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(-5),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(-1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(-700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(-400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(-5),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(-1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, -2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-5),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(-128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(-512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        -1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(-1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(-2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(-3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(incorrectBanner)),
        Some(Seq(3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(-3)),
        Some(Seq(2))),
      (Seq("video/flv"),
        Some(10),
        Some(20),
        Some(3),
        Some(Seq(1, 2, 4)),
        Some(700),
        Some(400),
        Some(0),
        Some(1),
        Some(5),
        Some(Seq(1, 2, 3, 10)),
        Some(-1),
        Some(128),
        Some(512),
        1,
        Some(Seq(1)),
        Some(Seq(2)),
        Some(3),
        Some(Seq(correctBanner)),
        Some(Seq(3)),
        Some(Seq(-2))))

    forAll(incorrectVideos) { (
      mimes: Seq[String],
      minDuration: Option[Int],
      maxDuration: Option[Int],
      protocol: Option[Int],
      protocols: Option[Seq[Int]],
      w: Option[Int],
      h: Option[Int],
      startDelay: Option[Int],
      linearity: Option[Int],
      sequence: Option[Int],
      battr: Option[Seq[Int]],
      maxExtended: Option[Int],
      minBitrate: Option[Int],
      maxBitrate: Option[Int],
      boxingAllowed: Int,
      playbackMethod: Option[Seq[Int]],
      delivery: Option[Seq[Int]],
      pos: Option[Int],
      companionAd: Option[Seq[Banner]],
      api: Option[Seq[Int]],
      companionType: Option[Seq[Int]]) =>

      val video = Video(
        mimes,
        minDuration,
        maxDuration,
        protocol,
        protocols,
        w,
        h,
        startDelay,
        linearity,
        sequence,
        battr,
        maxExtended,
        minBitrate,
        maxBitrate,
        boxingAllowed,
        playbackMethod,
        delivery,
        pos,
        companionAd,
        api,
        companionType,
        None)
      val adImp = ad.builder.ImpBuilder("1").withVideo(video).build
      val adSite = adSiteBuilder.build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json).withSite(adSite).build

      val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
      thrown.getError shouldBe ErrorCode.INCORRECT_REQUEST
    }
  }

  it should "create bid request for ad request with correct native" in {
    val correctNatives = Table(
      ("ver", "api", "battr"),
      (Some("1.1"), Some(Seq(1, 3)), Some(Seq(1, 3, 5))),
      (Some("1.1"), None, None),
      (None, Some(Seq(1, 3)), None),
      (None, None, Some(Seq(1, 3, 5))),
      (None, None, None))

    forAll(correctNatives) { (
      ver: Option[String],
      api: Option[Seq[Int]],
      battr: Option[Seq[Int]]) =>

      val native = Native("native", ver, api, battr, None)
      val adImp = ad.builder.ImpBuilder("1").withNative(native).build
      val adSite = adSiteBuilder.build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json).withSite(adSite).build

      val site = siteBuilder.withPublisher(publisher1).build
      val imp = ImpBuilder(adImp.id).withNative(native).build
      val expectedBidRequest = BidRequestBuilder(adRequestId, Seq(imp))
        .withSite(site)
        .withBcat(getCategoriesId(dbPublisher1.blockedCategoriesIds))
        .withBadv(dbPublisher1.blockedDomains)
        .build

      factory.create(adRequest) shouldBe expectedBidRequest
    }
  }

  it should "throw DataValidationException for ad request with incorrect native" in {
    val incorrectNatives = Table(
      ("request", "ver", "api", "battr"),
      ("", None, None, None),
      ("native", Some(""), None, None),
      ("native", None, Some(Seq(1, 55)), None),
      ("native", None, None, Some(Seq(0, 3, 5))),
      ("", Some("1.1"), Some(Seq(1, 3)), Some(Seq(1, 3, 5))),
      ("native", Some(""), Some(Seq(1, 3)), Some(Seq(1, 3, 5))),
      ("native", Some("1.1"), Some(Seq()), Some(Seq(1, 3, 5))),
      ("native", Some("1.1"), Some(Seq(1, 3)), Some(Seq())))

    forAll(incorrectNatives) { (
      request: String,
      ver: Option[String],
      api: Option[Seq[Int]],
      battr: Option[Seq[Int]]) =>

      val native = Native(request, ver, api, battr, None)
      val adImp = ad.builder.ImpBuilder("1").withNative(native).build
      val adSite = adSiteBuilder.build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json).withSite(adSite).build

      val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
      thrown.getError shouldBe ErrorCode.INCORRECT_REQUEST
    }
  }

  it should "throw DataValidationException for ad request without banner, video and native" in {
    val adImp = ad.builder.ImpBuilder("1").build
    val adSite = adSiteBuilder.build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json).withSite(adSite).build

    val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
    thrown.getError shouldBe ErrorCode.INCORRECT_REQUEST
  }

  it should "create bid request for ad request with correct user" in {
    val correctUsers = Table(
      ("id", "yob", "gender", "keywords", "geo"),
      (Some("123"), Some(1990), Some("M"), Some("kw1,kw2"), Some(correctGeo)),
      (Some("123"), None, None, None, None),
      (None, Some(1990), None, None, None),
      (None, None, Some("M"), None, None),
      (None, None, Some("F"), None, None),
      (None, None, Some("O"), None, None),
      (None, None, None, Some("kw1,kw2"), None),
      (None, None, None, None, Some(correctGeo)),
      (None, None, None, None, None))

    forAll(correctUsers) { (
      id: Option[String],
      yob: Option[Int],
      gender: Option[String],
      keywords: Option[String],
      geo: Option[Geo]) =>

      val adUser = ad.User(id, yob, gender, keywords, geo)
      val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
      val adSite = adSiteBuilder.build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
        .withSite(adSite)
        .withUser(adUser)
        .build

      val user = User(id, None, yob, gender, keywords, None, geo, None, None)
      val site = siteBuilder.withPublisher(publisher1).build
      val imp = ImpBuilder(adImp.id).withBanner(correctBanner).build
      val expectedBidRequest = BidRequestBuilder(adRequestId, Seq(imp))
        .withSite(site)
        .withBcat(getCategoriesId(dbPublisher1.blockedCategoriesIds))
        .withBadv(dbPublisher1.blockedDomains)
        .withUser(user)
        .build

      factory.create(adRequest) shouldBe expectedBidRequest
    }
  }

  it should "throw DataValidationException for ad request with incorrect user" in {
    val incorrectUsers = Table(
      ("id", "yob", "gender", "keywords", "geo"),
      (Some(""), Some(1990), Some("M"), Some("kw1,kw2"), Some(correctGeo)),
      (Some("123"), Some(10), Some("M"), Some("kw1,kw2"), Some(correctGeo)),
      (Some("123"), Some(1990), Some("W"), Some("kw1,kw2"), Some(correctGeo)),
      (Some("123"), Some(1990), Some("M"), Some(""), Some(correctGeo)),
      (Some("123"), Some(1990), Some("M"), Some("kw1,kw2"), Some(incorrectGeo)),
      (Some(""), None, None, None, None),
      (None, Some(3000), None, None, None),
      (None, None, Some("1"), None, None),
      (None, None, None, Some(""), None),
      (None, None, None, None, Some(incorrectGeo)))

    forAll(incorrectUsers) { (
      id: Option[String],
      yob: Option[Int],
      gender: Option[String],
      keywords: Option[String],
      geo: Option[Geo]) =>

      val adUser = ad.User(id, yob, gender, keywords, geo)
      val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
      val adSite = adSiteBuilder.build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
        .withSite(adSite)
        .withUser(adUser)
        .build

      val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
      thrown.getError shouldBe ErrorCode.INCORRECT_REQUEST
    }
  }

  it should "create bid request for ad request with correct device" in {
    val correctDevices = Table[Device](
      "device",
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        Some(correctGeo),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        Some(0),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        Some(1),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        Some("11.11.11.11"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        Some("::1"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        Some(2),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("make"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("model"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("os"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("osv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("hwv"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(600),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(300),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(72),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(1),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(1),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("flashver"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("en"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("carrier"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(2),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("ifa"),
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("didsha1"),
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("didmd5"),
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("dpidsha1"),
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("dpidmd5"),
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("macsha1"),
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("macmd5"),
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None))

    forAll(correctDevices) { device =>
      val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
      val adSite = adSiteBuilder.build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
        .withSite(adSite)
        .withDevice(device)
        .build

      val site = siteBuilder.withPublisher(publisher1).build
      val imp = ImpBuilder(adImp.id).withBanner(correctBanner).build
      val expectedBidRequest = BidRequestBuilder(adRequestId, Seq(imp))
        .withSite(site)
        .withBcat(getCategoriesId(dbPublisher1.blockedCategoriesIds))
        .withBadv(dbPublisher1.blockedDomains)
        .withDevice(device)
        .build

      factory.create(adRequest) shouldBe expectedBidRequest
    }
  }

  it should "throw DataValidationException for ad request with incorrect device" in {
    val incorrectDevices = Table[Device](
      "device",
      Device(
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        Some(incorrectGeo),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        Some(2),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        Some(3),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        Some(0),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(-2),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(0),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(0),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(-3.3),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(2),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(10),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None),
      Device(
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None),
      Device(
        Some(""),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(incorrectGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(3),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(3),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some(""),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some(""),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(20),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some(""),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some(""),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some(""),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some(""),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some(""),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(0),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(0),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(0),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(0),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(-1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some(""),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some(""),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some(""),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(20),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some(""),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some(""),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some(""),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some(""),
        Some("dpidmd5"),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some(""),
        Some("macsha1"),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some(""),
        Some("macmd5"),
        None),
      Device(
        Some("ua"),
        Some(correctGeo),
        Some(0),
        Some(1),
        Some("11.11.11.11"),
        Some("::1"),
        Some(2),
        Some("make"),
        Some("model"),
        Some("os"),
        Some("osv"),
        Some("hwv"),
        Some(600),
        Some(300),
        Some(72),
        Some(1),
        Some(1),
        Some("flashver"),
        Some("en"),
        Some("carrier"),
        Some(2),
        Some("ifa"),
        Some("didsha1"),
        Some("didmd5"),
        Some("dpidsha1"),
        Some("dpidmd5"),
        Some("macsha1"),
        Some(""),
        None))

    forAll(incorrectDevices) { device =>
      val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
      val adSite = adSiteBuilder.build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
        .withSite(adSite)
        .withDevice(device)
        .build

      val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
      thrown.getError shouldBe ErrorCode.INCORRECT_REQUEST
    }
  }

  it should "create bid request for ad request with correct geo" in {
    val correctGeos = Table(
      ("lat",
        "lon",
        "`type`",
        "country",
        "region",
        "regionFips104",
        "metro",
        "city",
        "zip",
        "utcOffset"),
      (Some(42.42f),
        Some(24.24f),
        Some(3),
        Some("country"),
        Some("region"),
        Some("regionFips"),
        Some("metro"),
        Some("city"),
        Some("zip"),
        Some(4)),
      (Some(42.42f),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        Some(24.24f),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        Some(3),
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        Some("country"),
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        Some("region"),
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        Some("regionFips"),
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        Some("metro"),
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("city"),
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("zip"),
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(3)),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None))

    forAll(correctGeos) { (
      lat: Option[Float],
      lon: Option[Float],
      `type`: Option[Int],
      country: Option[String],
      region: Option[String],
      regionFips104: Option[String],
      metro: Option[String],
      city: Option[String],
      zip: Option[String],
      utcOffset: Option[Int]) =>

      val geo = Geo(
        lat,
        lon,
        `type`,
        country,
        region,
        regionFips104,
        metro,
        city,
        zip,
        utcOffset,
        None)
      val adUser = ad.builder.UserBuilder().withGeo(geo).build
      val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
      val adSite = adSiteBuilder.build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
        .withSite(adSite)
        .withUser(adUser)
        .build

      val user = UserBuilder().withGeo(geo).build
      val site = siteBuilder.withPublisher(publisher1).build
      val imp = ImpBuilder(adImp.id).withBanner(correctBanner).build
      val expectedBidRequest = BidRequestBuilder(adRequestId, Seq(imp))
        .withSite(site)
        .withBcat(getCategoriesId(dbPublisher1.blockedCategoriesIds))
        .withBadv(dbPublisher1.blockedDomains)
        .withUser(user)
        .build

      factory.create(adRequest) shouldBe expectedBidRequest
    }
  }

  it should "throw DataValidationException for ad request with incorrect geo" in {
    val incorrectGeos = Table(
      ("lat",
        "lon",
        "`type`",
        "country",
        "region",
        "regionFips104",
        "metro",
        "city",
        "zip",
        "utcOffset"),
      (Some(200f),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        Some(-200f),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        Some(4),
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(-20)),
      (Some(-90.1f),
        Some(24.24f),
        Some(3),
        Some("country"),
        Some("region"),
        Some("regionFips"),
        Some("metro"),
        Some("city"),
        Some("zip"),
        Some(4)),
      (Some(42.42f),
        Some(180.0001f),
        Some(3),
        Some("country"),
        Some("region"),
        Some("regionFips"),
        Some("metro"),
        Some("city"),
        Some("zip"),
        Some(4)),
      (Some(42.42f),
        Some(24.24f),
        Some(0),
        Some("country"),
        Some("region"),
        Some("regionFips"),
        Some("metro"),
        Some("city"),
        Some("zip"),
        Some(4)),
      (Some(42.42f),
        Some(24.24f),
        Some(3),
        Some(""),
        Some("region"),
        Some("regionFips"),
        Some("metro"),
        Some("city"),
        Some("zip"),
        Some(4)),
      (Some(42.42f),
        Some(24.24f),
        Some(3),
        Some("country"),
        Some(""),
        Some("regionFips"),
        Some("metro"),
        Some("city"),
        Some("zip"),
        Some(4)),
      (Some(42.42f),
        Some(24.24f),
        Some(3),
        Some("country"),
        Some("region"),
        Some(""),
        Some("metro"),
        Some("city"),
        Some("zip"),
        Some(4)),
      (Some(42.42f),
        Some(24.24f),
        Some(3),
        Some("country"),
        Some("region"),
        Some("regionFips"),
        Some(""),
        Some("city"),
        Some("zip"),
        Some(4)),
      (Some(42.42f),
        Some(24.24f),
        Some(3),
        Some("country"),
        Some("region"),
        Some("regionFips"),
        Some("metro"),
        Some(""),
        Some("zip"),
        Some(4)),
      (Some(42.42f),
        Some(24.24f),
        Some(3),
        Some("country"),
        Some("region"),
        Some("regionFips"),
        Some("metro"),
        Some("city"),
        Some(""),
        Some(4)),
      (Some(42.42f),
        Some(24.24f),
        Some(3),
        Some("country"),
        Some("region"),
        Some("regionFips"),
        Some("metro"),
        Some("city"),
        Some("zip"),
        Some(30)))

    forAll(incorrectGeos) { (
      lat: Option[Float],
      lon: Option[Float],
      `type`: Option[Int],
      country: Option[String],
      region: Option[String],
      regionFips104: Option[String],
      metro: Option[String],
      city: Option[String],
      zip: Option[String],
      utcOffset: Option[Int]) =>

      val geo = Geo(
        lat,
        lon,
        `type`,
        country,
        region,
        regionFips104,
        metro,
        city,
        zip,
        utcOffset,
        None)
      val adUser = ad.builder.UserBuilder().withGeo(geo).build
      val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
      val adSite = adSiteBuilder.build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
        .withSite(adSite)
        .withUser(adUser)
        .build

      val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
      thrown.getError shouldBe ErrorCode.INCORRECT_REQUEST
    }
  }

  it should "create bid request for ad request with correct content" in {
    val correctContents = Table(
      ("id",
        "episode",
        "title",
        "series",
        "season",
        "producer",
        "url",
        "cat",
        "videoQuality",
        "context",
        "contentRating",
        "userRating",
        "qagMediaRating",
        "keywords",
        "liveStream",
        "sourceRelationship",
        "len",
        "language",
        "embeddable"),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        Some(5),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        Some("title"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        Some("auto"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        Some("s3"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        Some(correctProducer),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        Some("content.com"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(getCategoriesId(Seq(1, 2))),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(2),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(1),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("MPAA"),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("middle"),
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(2),
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("kw1,kw2"),
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(1),
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(0),
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(30),
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some("ru"),
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(0)),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None))

    forAll(correctContents) { (
      id: Option[String],
      episode: Option[Int],
      title: Option[String],
      series: Option[String],
      season: Option[String],
      producer: Option[Producer],
      url: Option[String],
      cat: Option[Seq[String]],
      videoQuality: Option[Int],
      context: Option[Int],
      contentRating: Option[String],
      userRating: Option[String],
      qagMediaRating: Option[Int],
      keywords: Option[String],
      liveStream: Option[Int],
      sourceRelationship: Option[Int],
      len: Option[Int],
      language: Option[String],
      embeddable: Option[Int]) =>

      val content = Content(
        id,
        episode,
        title,
        series,
        season,
        producer,
        url,
        cat,
        videoQuality,
        context,
        contentRating,
        userRating,
        qagMediaRating,
        keywords,
        liveStream,
        sourceRelationship,
        len,
        language,
        embeddable,
        None)
      val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
      val adSite = adSiteBuilder.withContent(content).build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
        .withSite(adSite)
        .build

      val site = siteBuilder
        .withPublisher(publisher1)
        .withContent(content)
        .build
      val imp = ImpBuilder(adImp.id).withBanner(correctBanner).build
      val expectedBidRequest = BidRequestBuilder(adRequestId, Seq(imp))
        .withSite(site)
        .withBcat(getCategoriesId(dbPublisher1.blockedCategoriesIds))
        .withBadv(dbPublisher1.blockedDomains)
        .build

      factory.create(adRequest) shouldBe expectedBidRequest
    }
  }

  it should "throw DataValidationException for ad request with incorrect content" in {
    val incorrectContents = Table(
      ("id",
        "episode",
        "title",
        "series",
        "season",
        "producer",
        "url",
        "cat",
        "videoQuality",
        "context",
        "contentRating",
        "userRating",
        "qagMediaRating",
        "keywords",
        "liveStream",
        "sourceRelationship",
        "len",
        "language",
        "embeddable"),
      (Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        Some(incorrectProducer),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(10),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(10),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(5),
        None,
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None,
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(2),
        None,
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(2),
        None,
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(0),
        None,
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(""),
        None),
      (None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(-1)),
      (Some(""),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some(""),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some(""),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some(""),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(incorrectProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some(""),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(-1),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(0),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some(""),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some(""),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(0),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some(""),
        Some(1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(-1),
        Some(0),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(2),
        Some(30),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(-100),
        Some("ru"),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some(""),
        Some(0)),
      (Some("123"),
        Some(5),
        Some("title"),
        Some("auto"),
        Some("s3"),
        Some(correctProducer),
        Some("content.com"),
        Some(getCategoriesId(Seq(1, 2))),
        Some(2),
        Some(1),
        Some("MPAA"),
        Some("middle"),
        Some(2),
        Some("kw1,kw2"),
        Some(1),
        Some(0),
        Some(30),
        Some(""),
        Some(3)))

    forAll(incorrectContents) { (
      id: Option[String],
      episode: Option[Int],
      title: Option[String],
      series: Option[String],
      season: Option[String],
      producer: Option[Producer],
      url: Option[String],
      cat: Option[Seq[String]],
      videoQuality: Option[Int],
      context: Option[Int],
      contentRating: Option[String],
      userRating: Option[String],
      qagMediaRating: Option[Int],
      keywords: Option[String],
      liveStream: Option[Int],
      sourceRelationship: Option[Int],
      len: Option[Int],
      language: Option[String],
      embeddable: Option[Int]) =>

      val content = Content(
        id,
        episode,
        title,
        series,
        season,
        producer,
        url,
        cat,
        videoQuality,
        context,
        contentRating,
        userRating,
        qagMediaRating,
        keywords,
        liveStream,
        sourceRelationship,
        len,
        language,
        embeddable,
        None)
      val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
      val adSite = adSiteBuilder.withContent(content).build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
        .withSite(adSite)
        .build

      val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
      thrown.getError shouldBe ErrorCode.INCORRECT_REQUEST
    }
  }

  it should
    "throw DataValidationException for ad request with incorrect iab category in content" in {
    val content = ContentBuilder().withCat(Seq("notiab")).build
    val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
    val adSite = adSiteBuilder.withContent(content).build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withSite(adSite)
      .build

    val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
    thrown.getError shouldBe ErrorCode.IAB_CATEGORY_NOT_FOUND
  }

  it should "create bid request for ad request with correct producer" in {
    val correctProducers = Table(
      ("id", "name", "cat", "domain"),
      (None, None, None, None),
      (Some("123"), None, None, None),
      (None, Some("prod"), None, None),
      (None, None, Some(correctIabsExample), None),
      (None, None, None, Some("prod.com")),
      (Some("123"), Some("prod"), Some(correctIabsExample), Some("prod.com")))

    forAll(correctProducers) { (
      id: Option[String],
      name: Option[String],
      cat: Option[Seq[String]],
      domain: Option[String]) =>

      val producer = Producer(id, name, cat, domain, None)
      val content = ContentBuilder().withProducer(producer).build
      val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
      val adSite = adSiteBuilder.withContent(content).build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
        .withSite(adSite)
        .build

      val site = siteBuilder
        .withPublisher(publisher1)
        .withContent(content)
        .build
      val imp = ImpBuilder(adImp.id).withBanner(correctBanner).build
      val expectedBidRequest = BidRequestBuilder(adRequestId, Seq(imp))
        .withSite(site)
        .withBcat(getCategoriesId(dbPublisher1.blockedCategoriesIds))
        .withBadv(dbPublisher1.blockedDomains)
        .build

      factory.create(adRequest) shouldBe expectedBidRequest
    }
  }

  it should "throw DataValidationException for ad request with incorrect producer" in {
    val incorrectProducers = Table(
      ("id", "name", "cat", "domain"),
      (Some(""), Some("prod"), Some(correctIabsExample), Some("prod.com")),
      (Some("123"), Some(""), Some(correctIabsExample), Some("prod.com")),
      (Some("123"), Some("prod"), Some(correctIabsExample), Some("")),
      (Some(""), None, None, None),
      (None, Some(""), None, None),
      (None, None, Some(Seq()), None),
      (None, None, None, Some("")))

    forAll(incorrectProducers) { (
      id: Option[String],
      name: Option[String],
      cat: Option[Seq[String]],
      domain: Option[String]) =>

      val producer = Producer(id, name, cat, domain, None)
      val content = ContentBuilder().withProducer(producer).build
      val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
      val adSite = adSiteBuilder.withContent(content).build
      val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
        .withSite(adSite)
        .build

      val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
      thrown.getError shouldBe ErrorCode.INCORRECT_REQUEST
    }
  }

  it should "throw DataValidationException for ad request with incorrect iab category in " +
    "producer" in {
    val producer = ProducerBuilder().withCat(Seq("notiab")).build
    val content = ContentBuilder().withProducer(producer).build
    val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
    val adSite = adSiteBuilder.withContent(content).build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withSite(adSite)
      .build

    val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
    thrown.getError shouldBe ErrorCode.IAB_CATEGORY_NOT_FOUND
  }

  it should "create bid request for ad request with correct regs" in {
    val regs = RegsBuilder().withCoppa(1).build
    val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
    val adSite = adSiteBuilder.build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withSite(adSite)
      .withRegs(regs)
      .build

    val site = siteBuilder.withPublisher(publisher1).build
    val imp = ImpBuilder(adImp.id).withBanner(correctBanner).build
    val expectedBidRequest = BidRequestBuilder(adRequestId, Seq(imp))
      .withSite(site)
      .withBcat(getCategoriesId(dbPublisher1.blockedCategoriesIds))
      .withBadv(dbPublisher1.blockedDomains)
      .withRegs(regs)
      .build

    factory.create(adRequest) shouldBe expectedBidRequest
  }

  it should "throw DataValidationException for ad request with incorrect regs" in {
    val regs = RegsBuilder().withCoppa(2).build
    val adImp = ad.builder.ImpBuilder("1").withBanner(correctBanner).build
    val adSite = adSiteBuilder.build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withSite(adSite)
      .withRegs(regs)
      .build

    val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
    thrown.getError shouldBe ErrorCode.INCORRECT_REQUEST
  }

  it should "not create bid request if db does not contains sites" in {
    val siteDao = mock[SiteDao]
    expecting {
      siteDao.getAll.andStubReturn(Seq.empty)
      siteDao.get(anyInt).andStubReturn(None)
      siteDao.get(anyObject[Seq[Int]]).andStubReturn(Seq.empty)
      replay(siteDao)
    }
    val factory = new BidRequestFactoryImpl(categoryDao, publisherDao, siteDao, appDao)

    val adImp = ad.builder.ImpBuilder("1")
      .withBanner(correctBanner)
      .withNative(correctNative)
      .withVideo(correctVideo)
      .build
    val adSite = adSiteBuilder
      .withSectionCat(getCategoriesId(Seq(1, 2)))
      .withPageCat(getCategoriesId(Seq(1)))
      .withPage("page123")
      .withRef("from.com")
      .withSearch("search")
      .withMobile(0)
      .withContent(correctContent)
      .build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withSite(adSite)
      .withUser(correctAdUser)
      .withDevice(correctDevice)
      .withRegs(correctRegs)
      .withTmax(500)
      .build

    val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
    thrown.getError shouldBe ErrorCode.SITE_OR_APP_NOT_FOUND
  }

  it should "not create bid request if db does not contains apps" in {
    val appDao = mock[AppDao]
    expecting {
      appDao.getAll.andStubReturn(Seq.empty)
      appDao.get(anyInt).andStubReturn(None)
      appDao.get(anyObject[Seq[Int]]).andStubReturn(Seq.empty)
      replay(appDao)
    }
    val factory = new BidRequestFactoryImpl(categoryDao, publisherDao, siteDao, appDao)

    val adImp = ad.builder.ImpBuilder("1")
      .withBanner(correctBanner)
      .withNative(correctNative)
      .withVideo(correctVideo)
      .build
    val adApp = adAppBuilder
      .withSectionCat(getCategoriesId(Seq(5, 6)))
      .withPageCat(getCategoriesId(Seq(5)))
      .withContent(correctContent)
      .build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withApp(adApp)
      .withUser(correctAdUser)
      .withDevice(correctDevice)
      .withRegs(correctRegs)
      .withTmax(500)
      .build

    val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
    thrown.getError shouldBe ErrorCode.SITE_OR_APP_NOT_FOUND
  }

  it should "not create bid request if db does not contains categories" in {
    val categoryDao = mock[CategoryDao]
    expecting {
      categoryDao.getAll.andStubReturn(Seq.empty)
      categoryDao.get(anyInt).andStubReturn(None)
      categoryDao.get(anyObject[Seq[Int]]).andStubReturn(Seq.empty)
      replay(categoryDao)
    }
    val factory = new BidRequestFactoryImpl(categoryDao, publisherDao, siteDao, appDao)

    val adImp = ad.builder.ImpBuilder("1")
      .withBanner(correctBanner)
      .withNative(correctNative)
      .withVideo(correctVideo)
      .build
    val adApp = adAppBuilder
      .withSectionCat(getCategoriesId(Seq(5, 6)))
      .withPageCat(getCategoriesId(Seq(5)))
      .withContent(correctContent)
      .build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withApp(adApp)
      .withUser(correctAdUser)
      .withDevice(correctDevice)
      .withRegs(correctRegs)
      .withTmax(500)
      .build

    val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
    thrown.getError shouldBe ErrorCode.IAB_CATEGORY_NOT_FOUND
  }

  it should "not create bid request if db does not contains publishers" in {
    val publisherDao = mock[PublisherDao]
    expecting {
      publisherDao.getAll.andStubReturn(Seq.empty)
      publisherDao.get(anyInt).andStubReturn(None)
      publisherDao.get(anyObject[Seq[Int]]).andStubReturn(Seq.empty)
      replay(publisherDao)
    }
    val factory = new BidRequestFactoryImpl(categoryDao, publisherDao, siteDao, appDao)

    val adImp = ad.builder.ImpBuilder("1")
      .withBanner(correctBanner)
      .withNative(correctNative)
      .withVideo(correctVideo)
      .build
    val adApp = adAppBuilder
      .withSectionCat(getCategoriesId(Seq(5, 6)))
      .withPageCat(getCategoriesId(Seq(5)))
      .withContent(correctContent)
      .build
    val adRequest = AdRequestBuilder(adRequestId, Seq(adImp), Json)
      .withApp(adApp)
      .withUser(correctAdUser)
      .withDevice(correctDevice)
      .withRegs(correctRegs)
      .withTmax(500)
      .build

    val thrown = the[DataValidationException] thrownBy factory.create(adRequest)
    thrown.getError shouldBe ErrorCode.PUBLISHER_NOT_FOUND
  }
}
